plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'ch.so.agi.simi.schemareader'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.commons:commons-lang3'	
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
		
	implementation 'org.postgresql:postgresql'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task testJar{
	dependsOn 'testdb:initTestDb'
	dependsOn build
	
	build.mustRunAfter 'testdb:initTestDb'
}

task copyJar(type: Copy, dependsOn: testJar){
    from file("$buildDir/libs/schemareader.jar")
    into file("$projectDir/docker/image/tmp")
}

task buildImage(type:Exec, dependsOn: copyJar) {
	def githash = getCheckedOutGitCommitHash()
	def buildident = getVersion()
	def build_timestamp = getTimestamp()

 	workingDir "$projectDir/docker/image"
 	commandLine 'docker', 'build',
				'--no-cache', '--force-rm',
				'-t', "sogis/simi_schemareader:$buildident",
				'--label', "simi_schemareader.created=$build_timestamp", 
				'--label', "simi_schemareader.git_commit=$githash",
				'--label', "simi_schemareader.version=$buildident",
				'-f', 'Dockerfile',  '.'
}


task tagImage(type:Exec, dependsOn: buildImage) {
	def buildident = getVersion()
	
 	commandLine 'docker', 'tag', 
				"sogis/simi_schemareader:$buildident",
				"sogis/simi_schemareader:latest"
}

task imgDown(type:Exec) {
  workingDir "$projectDir/docker"
 	commandLine 'docker-compose', 'down'
 	ignoreExitValue true
}

task imgUp(type:Exec){
 	workingDir "$projectDir/docker"
 	commandLine 'docker-compose', 'up', '-d'
 	
 	dependsOn imgDown
 	
 	doLast { 	
	  sleep(10000)
	}
}

// Asserts with one http get that the image is "sane"
task imgTest{

	dependsOn imgUp
	dependsOn tagImage
	
	imgUp.mustRunAfter tagImage
	
 	doLast { 	
        def resp = new java.net.URL("http://localhost:8080/postgis?schema=public").text
        
        if(resp == null || !resp.contains("tableViewList"))
        	throw new java.lang.RuntimeException("Can't execute get on docker image") 
    }
}
task pushImgLatest(type:Exec) {
	commandLine 'docker', 'push', "sogis/simi_schemareader:latest"
}

task pushImg(type:Exec, dependsOn: pushImgLatest) {
	def version = getVersion()
	commandLine 'docker', 'push', "sogis/simi_schemareader:$version"
}

String getVersion(){
	return "1.1." + getBuildNumber()
}

String getBuildNumber() {
	String val = System.getenv('GITHUB_RUN_NUMBER')

	if(val == null)
		val = 'localbuild'

	return val
}

def getCheckedOutGitCommitHash() {
  'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

